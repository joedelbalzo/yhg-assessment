current functions:

a user selects their type of book.

if hardcover:
  THIS CODE IS HARDCODED ONTO THE BACK OF THE BOOK, SO WE KNOW IN ADVANCE WHAT THIS CODE IS GOING TO BE.
  user enters a code, presses submit. an invisible recaptcha is triggered here. it appears to be working but haven't figured out a way to lower my score to make sure the error works
  user enters an email. the emails have to match.

  code and email sent to the backend. 
  in the TRY block
  first, the code passes a regex. right now it's just numeric
  (sends back an invalid format error if fails)

  a function calls the google sheet
  (error comes back if the sheet is invalidated for some reason)

  a function checks for the code in the google sheet, responds with the code and its row
  (sends error if unsuccessful)

  a function checks the email address
  (if the email has already been used, sends an error)

  after code and email have been validated, we move on to a different google sheet filled with unique domains. 
  (error spits back if this fetch fails)

  we grab the user the first available domain from this sheet. we mark this domain as USED
  (question, would it be faster to grab the last one and pop it off the sheet and push it onto a USED DOMAINS sheet?)

  now that we have the code, email, and domain, we update the main sheet with the new code.

  send a response with the code.
  add the code to the user's localStorage

  in the CATCH block:
    send errors. 

  to-do: send an email. 


if an e-book:

  //WE HAVE NO WAY TO CONFIRM THAT THIS CODE IS REAL, DUE TO THE NATURE OF E-BOOK SALES. 
  user enters a code, presses submit. an invisible recaptcha is triggered here. 

  in the TRY block:
  we receive the code and the email.
  passes regex, regex tbd.

  call the google sheet
  (send errors if it doesn't exist)
  we check a field in the google sheet that is designed to make sure there aren't a thousand domains going out when only 200 ebooks have been sold. It's a 1.2x formula -- ie if 10,000 books have been sold, it will be impossible for there to be more than 12,000 unique domains divulged before a user must email us asking for a code. 

  so, we confirm that the code is unused and the email is unused. 
  (errors sent if either fail)

  once the email and code are validated, we do the same steps as hardcover. Retrieve a domain, call it "USED", update the eBook sheet with the code, the email, and the unique domain. 

  send the code to the front end.
  add the code to the user's localStorage

  in the CATCH block:
    send errors. 

  to-do: send an email with the code.


if a library book:
  THESE CODES CAN BE USED MULTIPLE TIMES, BUT WE DO KNOW THE CODE IS REAL. The publisher estimates that a library book is borrowed somewhere between 20-25 times, so we'll make the available domains per book 30. 

  this has all of the same processes as a hardcover, the only difference is a field is updated to count the number of uses. 

  when that field expires, that code will no longer be allowed. 
  (error sent to contact admin)

  remaining processes all the same as hardcover.
