psuedo code as of 8/28/24

The task is to connect a user/customer with a third party agency via a coupon code. 
A user submits their code and email address, and will be returned a unique URL link that directs them to the third party. 
(note: in this whole doc, I use "domain" and "unique link" and "URL" interchangeably. I know they're different things. It's just a URL that sends the user to a dashboard where they can set up their account)

Subtasks: 
--user can retrieve their third party connection with their email or coupon code
--admin can collect the email addresses for marketing

So, in the portal...
User selects their type of book: hardcover, e-book, or library book. TBD: audio books and library audio. 

A user enters their code:
  a hardcover book and a library book have physical codes.
  an ebook and an audiobook have receipt numbers but NOT ACTUAL CODES.
  Prior to a user hitting submit, an invisible reCAPTCHAv3 is done in the background. 
  If the invisible reCAPTCHAv3 fails, a back-up normal reCAPTCHAv2 appears.
  Submit is disabled depending on two things: a code entered and the reCAPTCHA passed.
  Upon submitting, the user can enter their email. 


A user enters their email address.
  They enter it twice, one normal field and one confirmation field. 
  If the fields don't match, an error appears. Submit is disabled.

The user hits submit. A loader appears.

Upon submitting...

  In the front end:
    Both the email and code pass a simple regex to confirm validity. Returns an error if anything fails.
    Using Axios, the code, email, and book type are all sent to the database. 
    If the response fails, an error is sent to the front end console.

  In the back end:
    addToQueue() is called. 
      This function immediately checks if the user has somehow submitted twice. It checks the last 20 slots in the array for an exact duplicate.
      --note, we'll never hit 20 users submitting codes at the same time, but just in case. 
      If this is unique, the email, code, and book type are all pushed to a queue array. 
      If it is not unique, an error is sent to the front end.
      processQueue() is called at the end of this function. 

    processQueue() 
      setTimeout for 1 second. There's a 0% chance we're handling more than a few requests at a time, but I want to make sure it stays that way. 
      It runs more smoothly at 1.5s, but I want to improve UX knowing that we'll never process 200 requests in a second (which is what my test was)
      If the queue length is > 0 and we're not currently processing, we set processing == true.
        Create variables for the email, code, and booktype using queue.shift()
        await handleRequest()
        after handleRequest() is complete, set processing back to false
    
    handleRequest(), when called...
      Runs the email and the code through a slightly more complex regex. Returns an error if anything fails.
      checkEmail(email) is called. This function confirms that the email is unique. More below on this function.
        if the email is not unique, they've already done this. The user's unique URL link is returned. 
        if the email is unique, we create JSON data with their email, code, book type, and an API key. 
        the JSON is posted to Google App Scripts. 

      In Google App Scripts...
        The JSON data is parsed. Returns an error if it fails. 
        The API key is checked. 
        Variables for the email, book type, and code are generated from the JSON data. 
        The code is parsed into an INTEGER ((NOTE FOR JOE. CONFIRM THAT ALL CODE REGEXS ARE FOR INTEGERS!))
          It has to be done this way because Google Sheets freaks the fuck out if you're searching through strings all day. 
        
        The masterSheet, the codeSheet(bookType), and the domainSheet are retrieved.
          Quick cleanup: if the masterSheet has grown by 100 emails since the last sorting, sort email addresses alphabetically.
          Quick cleanup part 2: sort the email addresses alphabetically at midnight every night.
          Switch case:
            four different functions:
              processHardcover()
              processLibrary()
              processEBook()
              processAudioBook()

        processHardcover()
          Collects all of the data (easier to do it this way because it's only one API call)
          If the user's code does not exist, return an error. 
          If the user's code exists:
            Go immediately to the domainSheet to grab the user a unique URL link and mark that link USED
              (do this first, so that if another function being processed is moving faster. tested this a few times where different users would be returned the same link)
              If there are no domains, an error is returned. 
            Update the following information:
              domain is USED
              code is USED
              attach the email and the domain to the code. 
              attach ALL OF THE ABOVE to a new row in the master sheet.
            Return to the server the user's email and the domain. 
        
          processLibrary()
            This is the exact same as the processHardcover function, except each code has a "timesUsed" parameter. Each code can be used 25 times. 
            If the code has been used more than 25 times, return error. 
            Return to the server the user's email and the domain. 


          processEBook and processAudioBook are different because there is no code to find.
            Confirm that the submitted code is UNIQUE, amend a new row to the sheet with the code, email, and domain. 
            Amend that to the master sheet. 
            Return to the server the user's email and the domain. 
  
  Once returned to the express server
    If failed:
      Six possible outcomes and their error responses:
          "Code already used": "This code has been used. Contact us.",
          "Email already used": "This email has been used. Contact us.",
          "Code not found": "This code was not found. Contact us.",
          "No available domains": "No available domains. Contact us.",
          "Maximum number of codes reached.": "EBooks have surpassed their usage limit. Contact us.",
          "This code has reached its usage limit.": "Library book has surpassed its usage limit. Contact us."
    
    If success:
      Cache the email address and the domain. The cache refreshes every 12 hours, and will hopefully save a lot of API calls while still being secure. 

  Other useful back end routes:
    post("/check-email")
      This route is for retrieving a user's unique link if they've forgotten it.
      On the front end, a user can enter a code or an email. Like above, we run that through a regex, confirm whether they've sent a code OR an email (so it can be processed in the back end more easily), and then send to the back end. 
        FUN EASTER EGGS: here are the admin tools. an admin can force an export of the latest list of emails here (for the sake of importing them into the marketing email list, because annoyingly there's no way to automate this in squarespace), and an admin can also force refresh the cache.
      
      On the back end, the email or code are confirmed through regexes. 
      Then, the email is checked against the cache first and then against the database. If there's a cache hit, great. If there isn't, we need to do an API call. 
      If it's a code, the code is checked. The cache is an Object map where the keys are emails, so unfortunately if a user checks for their link by their code, we have to do an API call. It's fine though -- the chances of someone checking with their 8 digit code and not their email is highly unlikely. 
      If either are successful, the domain is sent to the front end. 

  Other useful back end functions:
    checkEmail()
      This function checks if an Email has already been used. First it checks the cache, and then it checks the master sheet.
      If the email is in the master sheet but not in the cache, it's added to the cache.
    checkCode()
      This function checks if a Code has already been used. It checks the master sheet.
      This function is ONLY CALLED if a user has gone down the "forgot your URL?" path. This function is not called at any other point. 

          
  Back in the front end:
    Three potential 200 response successes:
      Email already used, here's the unique link you already claimed.
      Code already used, here's the unique link you already claimed.
      Plain old success, here's the unique link
    
    handleAxiosError() for failures:
        "This code has been used. Contact us.",
        "This email has been used. Contact us.",
        "This code was not found. Contact us.",
        "No available domains. Contact us.",
        "EBooks have surpassed their usage limit. Contact us.",
        "Library book has surpassed its usage limit. Contact us."

  And finally, the user can change the state to hide the redemption portal. Tada. 

Things I'm considering adding: 
  -- cache maximum size. I can guarantee that most people will set up their third party dashboard almost immediately after finishing up with our portal. At that point, anyone who forgot their shit will actually have to deal with the third party directly. I feel like I can set the cache to 1000 emails and even that will be far more than needed.
  -- more admin tools. Am I forgetting anything?
  -- If I get time, I would redo the entire error setup to make the errors exactly the same on the front end and back end. Obviously the ones on the back end would have more details, but the ones on the front end could be a similar object, with the same code, same message, and just no stack. 


  OK EMILY THAT'S ALL!! NOTHING BELOW MATTERS. 

8/26
update error if an email isn't found
update responses for admin tools. maybe make it one response that just has a template literal message. 
update back button appropriately

psuedo code as of 7/29/24

The task is to connect a user/customer with a third party agency via a coupon code. 
A user submits their code and email address, and will be returned a unique URL link that sets them up with an account with third party. 

User selects their type of book: hardcover, e-book, or library book. TBD: audio books and library audio. 

A user enters their code:
  a hardcover book and a library book have physical codes.
  an ebook and an audiobook have receipt numbers but NOT ACTUAL CODES.
  Prior to a user hitting submit, an invisible reCAPTCHAv3 is done in the background. 
  If the invisible reCAPTCHAv3 fails, a back-up normal reCAPTCHAv2 appears.
  Submit is disabled depending on two things: a code entered and the reCAPTCHA passed.
  Upon submitting, the user can enter their email. 


A user enters their email address.
  They enter it twice, one normal field and one confirmation field. 
  If the fields don't match, an error appears. Submit is disabled.

The user hits submit. A loader appears.

Upon submitting...

  In the front end:
    Both the email and code pass a simple regex to confirm validity. Returns an error if anything fails.
    Using Axios, the code, email, and book type are all sent to the database. 
    If the response fails, an error is sent to the front end console.

  In the back end:
    addToQueue() is called. 
      This function immediately checks if the user has somehow submitted twice. It checks the last 20 slots in the array for an exact duplicate.
      If this is unique, the email, code, and book type are all pushed to a queue array. 
      processQueue() is called at the end of this function. 

    processQueue() 
      setTimeout for 1.5 seconds. There's a 0% chance we're handling more than a few requests at a time, but I want to make sure it stays that way. 
      If the queue length is > 0 and we're not currently processing, we set processing == true.
        Create variables for the email, code, and booktype using queue.shift()
        await handleRequest()
        after handleRequest() is complete, set processing back to false
    
    handleRequest(), when called...
      Runs the email and the code through a slightly more complex regex. Returns an error if anything fails.
      checkEmail(email) is called. This function confirms that the email is unique. More below on this function.
        if the email is not unique, they've already done this. The user's unique URL link is returned. 
        if the email is unique, we create JSON data with their email, code, book type, and an API key. 
        the JSON is posted to Google App Scripts. 

      In Google App Scripts...
        The JSON data is parsed. Returns an error if it fails. 
        The API key is checked. 
        Variables for the email, book type, and code are generated from the JSON data. 
        The code is parsed into an INTEGER ((NOTE FOR JOE. CONFIRM THAT ALL CODE REGEXS ARE FOR INTEGERS!))
          It has to be done this way because Google Sheets freaks the fuck out if you're searching through strings all day. 
        
        The masterSheet, the codeSheet(bookType), and the domainSheet are retrieved.
          Quick cleanup: if the masterSheet has grown by 100 emails since the last sorting, sort email addresses alphabetically.
          Switch case:
            four different functions:
              processHardcover()
              processLibrary()
              processEBook()
              processAudioBook()

        processHardcover()
          Collects all of the data (easier to do it this way because it's only one API call)
          If the user's code does not exist, return an error. 
          If the user's code exists:
            Go immediately to the domainSheet to grab the user a unique URL link and mark that link USED
              (do this first, so that if another function being processed is moving faster. tested this a few times where different users would be returned the same link)
              If there are no domains, an error is returned. 
            Update the following information:
              domain is USED
              code is USED
              attach the email and the domain to the code. 
              attach ALL OF THE ABOVE to a new row in the master sheet.
            Return to the server the user's email and the domain. 
        
          processLibrary()
            This is the exact same as the processHardcover function, except each code has a "timesUsed" parameter. Each code can be used 25 times. 
            If the code has been used more than 25 times, return error. 
            Return to the server the user's email and the domain. 


          processEBook and processAudioBook are different because there is no code to find.
            Confirm that the submitted code is UNIQUE, amend a new row to the sheet with the code, email, and domain. 
            Amend that to the master sheet. 
            Return to the server the user's email and the domain. 
  
  Once returned to the express server
    If failed:
      Six possible outcomes and their error responses:
          "Code already used": "This code has been used. Contact us.",
          "Email already used": "This email has been used. Contact us.",
          "Code not found": "This code was not found. Contact us.",
          "No available domains": "No available domains. Contact us.",
          "Maximum number of codes reached.": "EBooks have surpassed their usage limit. Contact us.",
          "This code has reached its usage limit.": "Library book has surpassed its usage limit. Contact us."
    
    If success:
      Cache the email address and the domain. The cache refreshes every 12 hours, and will hopefully save a lot of API calls while still being secure. 


    Other useful back end functions:
      checkEmail()
        This function checks if an Email has already been used. First it checks the cache, and then it checks the master sheet.
        If the email is in the master sheet but not in the cache, it's added to the cache.
        The emailCacheCount resets to 0 after every 50 adds. ((NOTE FOR JOE. THIS PROBABLY MAKES NO SENSE UNLESS THE WHOLE CACHE IS CLEARED LOLLL)) 
      checkCode()
        This function checks if a Code has already been used. It checks the master sheet.
        This function is ONLY CALLED if a user has gone down the "forgot your URL?" path. This function is not called at any other point. 
            ...but it could be? maybe there's something to this. 
            
    Back in the front end:
      Three potential 200 response successes:
        Email already used, here's your unique link
        Code already used, here's your unique link
        Plain old success, here's your unique link
      
      handleAxiosError() for failures:
          "This code has been used. Contact us.",
          "This email has been used. Contact us.",
          "This code was not found. Contact us.",
          "No available domains. Contact us.",
          "EBooks have surpassed their usage limit. Contact us.",
          "Library book has surpassed its usage limit. Contact us."

        
--END--

only aptitude and discovery should work?
is there some way to upgrade and/or transfer test to a full fledged retail account?
what is included in retail?

the only thing we could take off is the education planning, not have it active. 


what brings you here just focus on personal, career


6/24 to do
backup recaptcha?
clean up css now that recaptcha is invisible
use a cookie for a user's YS domain if they have one already?
sendEmail function

6/23/24
to-do-list
recaptcha error handling. right now it just returns false, but still lets a user proceed.
some functions to write in ccs, like an email checking function


how this should work:

states needed:
  purchase type
  code
  email
  captcha
  success t/f


upon successful request:
  thanks for your submission! you should receive an email from YouScience momentarily. Please check your spam folders if you don't receive it. 
    if you don't receive an email in the next few minutes, this button will activate and you can resubmit your request.
      in the meantime, there's a few more pages in the book to read between now and when you'll want to start!
      redirect button to the main website. 

upon failed request:
  --That code is invalid!!
    --Each book comes with only one activation code. If you believe your code hasn't been used before, please email us with a proof of purchase (this doesn't need to be anything crazy -- it can be a screenshot of your e-receipt, or a photo of the book itself. we don't want to make this so difficult that it turns you off from taking the test)

  --Your email is invalid!! Please double check your email address. Our servers got a request denied from the email you gave us.
    --This needs to clear the code in the db, but not necessarily in the state.


--on all three
    -have you done this already and haven't gotten your email from YouScience?
      - email us at (create an email just for this, like assessments@yourhiddengenius.com or something)
    
    

    


MEETING WITH YOU SCIENCE, 5/30/24
Bridget Fowers - organizer
Kathryn Chance --dev
Brian Hansen --pm
Bryan Campbell --dev

bryan pre-creates 100k codes, provides them to us, users come in as learners through their retail system
we get 100k codes in static urls, assign as we need from that cache 

QR codes for advanced readers?

amazon - 7 digit (the last 7 digits)
bn - 10 digits
google - 7 (but has characters)
kobo - 10 digits